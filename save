#ifndef SERVER_HPP_APDZQXOE
#define SERVER_HPP_APDZQXOE

#include <vector>
#include <thread>
#include <string>

#ifdef _WIN32

#include <WinSock2.h>

#else // *nix

#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <unistd.h>
#include <stdio.h>
#include <stdlib.h>

#endif

const static int MAX_HTTP_HEADERS = 40;
const static int g_buffer_size = 4096;

namespace Server {

/**********************************************************************
*                           CLIENTHANDLER                            *
**********************************************************************/

    class ClientHandler {
        public:
            ClientHandler();
            virtual ~ClientHandler();

            void Handle();
        private:
    };

/**********************************************************************
*                               SERVER                               *
**********************************************************************/

    class Server {
        public:
            enum Status : uint8_t {
                UP = 0,
                ERR_SOCKET_INIT = 1,
                ERR_SOCKET_BIND = 2,
                ERR_SOCKET_LISTENING = 3,
                CLOSE = 4
            };

            struct http_header {
                std::string name;
                std::string value;
            };

            struct http_message {
                std::string method, uri, query, proto; // Request/response line
                struct http_header headers[MAX_HTTP_HEADERS];  // Headers
                std::string body;                                  // Body
                std::string head;                                  // Request + headers
                std::string chunk;    // Chunk for chunked encoding,  or partial body
                std::string message;  // Request + headers + body
            };

            struct http_serve_opts {
                const char *root_dir;
                const char *ssi_pattern;
                const char *extra_headers;
                const char *mime_type;
            };

            static const uint8_t ev_error = 0x00;
            static const uint8_t ev_open = 0x00;
            static const uint8_t ev_error = 0x00;
            static const uint8_t ev_error = 0x00;
            static const uint8_t ev_error = 0x00;
            static const uint8_t ev_error = 0x00;
            static const uint8_t ev_error = 0x00;
        public:
            Server(int port);
            virtual ~Server();

            void ReStart();
            void Start();
            void Shutdown();

            int getPort();
            void setProt(int newport);
        private:
            void on_clientConnect();
            bool setup();
            bool bind();
            bool serve();

#ifdef _WIN32 // Windows
            SOCKET serv_socket = INVALID_SOCKET;
            WSAData w_data;
#else // *nix
            int _socketfd;
#endif

            int _port;
            Status _status = Status::CLOSE;
            struct sockaddr_in _server_address;
            std::vector<ClientHandler> _handlers;
            std::vector<std::thread> _handlers_threads;

            int _max_clients;
            int _connected_clients;
    };
} /* Server */ 

#endif /* end of include guard: SERVER_HPP_APDZQXOE */
